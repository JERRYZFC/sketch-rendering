(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({"/Users/Chase_Zhang/codes/pages/sketch-rendering/coffee/compose_material.coffee":[function(require,module,exports){
var ComposeMaterial,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

ComposeMaterial = (function(_super) {
  __extends(ComposeMaterial, _super);

  ComposeMaterial.prototype.attributes = {};

  ComposeMaterial.prototype.uniforms = {
    depthtexture: {
      type: 't',
      value: null
    },
    normaltexture: {
      type: 't',
      value: null
    }
  };

  ComposeMaterial.prototype.vertexShader = 'varying vec2 vUv;\nvoid main() {\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n  vUv = uv;\n}';

  ComposeMaterial.prototype.fragmentShader = 'uniform sampler2D depthtexture;\nuniform sampler2D normaltexture;\n\nvarying vec2 vUv;\n\nfloat planeDistance(const in vec3 positionA, const in vec3 normalA, \n                    const in vec3 positionB, const in vec3 normalB) {\n  vec3 positionDelta = positionB-positionA;\n  float planeDistanceDelta = max(abs(dot(positionDelta, normalA)), abs(dot(positionDelta, normalB)));\n  return planeDistanceDelta;\n}\n\nvoid main() {\n  float depthCenter = texture2D(depthtexture, vUv).r;\n  float px = 1.0/800.0;\n\n  vec3 leftpos = vec3(vUv.s - px, vUv.t, 1.0 - texture2D(depthtexture, vec2(vUv.s - px, vUv.t)).r);\n  vec3 rightpos = vec3(vUv.s + px, vUv.t, 1.0 - texture2D(depthtexture, vec2(vUv.s + px, vUv.t)).r);\n  vec3 uppos = vec3(vUv.s, vUv.t - px, 1.0 - texture2D(depthtexture, vec2(vUv.s, vUv.t - px)).r);\n  vec3 downpos = vec3(vUv.s, vUv.t + px, 1.0 - texture2D(depthtexture, vec2(vUv.s, vUv.t + px)).r);\n\n  vec3 leftnor = texture2D(normaltexture, vec2(vUv.s - px, vUv.t)).xyz;\n  vec3 rightnor = texture2D(normaltexture, vec2(vUv.s + px, vUv.t)).xyz;\n  vec3 upnor = texture2D(normaltexture, vec2(vUv.s, vUv.t - px)).xyz;\n  vec3 downnor = texture2D(normaltexture, vec2(vUv.s, vUv.t + px)).xyz;\n\n  vec2 planeDist = vec2(\n    planeDistance(leftpos, leftnor, rightpos, rightnor),\n    planeDistance(uppos, upnor, downpos, downnor));\n\n  float planeEdge = 2.5 * length(planeDist);\n  planeEdge = 1.0 - 0.5 * smoothstep(0.0, depthCenter, planeEdge);;\n\n  float normEdge = max(length(leftnor - rightnor), length(upnor - downnor));\n  normEdge = 1.0 - 0.2 * smoothstep(0.0, 0.2, normEdge); \n\n  float edge = planeEdge * normEdge;\n  gl_FragColor = vec4(vec3(edge), 1.0);\n}';

  function ComposeMaterial() {
    ComposeMaterial.__super__.constructor.call(this, {
      attributes: this.attributes,
      uniforms: this.uniforms,
      vertexShader: this.vertexShader,
      fragmentShader: this.fragmentShader
    });
  }

  return ComposeMaterial;

})(THREE.ShaderMaterial);

module.exports = ComposeMaterial;



},{}],"/Users/Chase_Zhang/codes/pages/sketch-rendering/coffee/main.coffee":[function(require,module,exports){
var SceneManager, element, manager;

SceneManager = require('./scene_manager');

element = document.getElementById('container');

manager = new SceneManager(element);

manager.render();



},{"./scene_manager":"/Users/Chase_Zhang/codes/pages/sketch-rendering/coffee/scene_manager.coffee"}],"/Users/Chase_Zhang/codes/pages/sketch-rendering/coffee/scene_manager.coffee":[function(require,module,exports){
var ComposeMaterial, SceneManager;

ComposeMaterial = require('./compose_material');

SceneManager = (function() {
  SceneManager.prototype.objectScene = new THREE.Scene();

  SceneManager.prototype.composeScene = new THREE.Scene();

  SceneManager.prototype.depthMaterial = new THREE.MeshDepthMaterial();

  SceneManager.prototype.normalMaterial = new THREE.MeshNormalMaterial();

  SceneManager.prototype.hatchMaterial = null;

  SceneManager.prototype.composeMaterial = new ComposeMaterial();

  SceneManager.prototype.renderer = new THREE.WebGLRenderer({
    antialias: true
  });

  function SceneManager(element) {
    this.element = element;
    this.width = this.element.clientWidth;
    this.height = this.element.clientHeight;
    this.initTextures();
    this.initObjectCamera();
    this.initComposeCamera();
    this.initObjectScene();
    this.initComposeScene();
    this.initRenderer();
  }

  SceneManager.prototype.initObjectCamera = function() {
    this.objectCamera = new THREE.PerspectiveCamera(45, this.width / this.height, 1, 30);
    this.objectCamera.position.z = 2;
    this.objectCamera.position.x = 14;
    this.objectCamera.position.y = 3;
    return this.objectCamera.lookAt(new THREE.Vector3(0, 0, 0));
  };

  SceneManager.prototype.initComposeCamera = function() {
    return this.composeCamera = new THREE.OrthographicCamera(-this.width / 2, this.width / 2, this.height / 2, -this.height / 2, -10, 10);
  };

  SceneManager.prototype.initObjectScene = function() {
    var boxGeometry, boxMesh, sphereGeometry, sphereMesh;
    boxGeometry = new THREE.BoxGeometry(2, 2, 2);
    sphereGeometry = new THREE.SphereGeometry(2, 32, 32);
    boxMesh = new THREE.Mesh(boxGeometry);
    sphereMesh = new THREE.Mesh(sphereGeometry);
    boxMesh.position.x = 1;
    sphereMesh.position.x = -1;
    this.objectScene.add(boxMesh);
    return this.objectScene.add(sphereMesh);
  };

  SceneManager.prototype.initComposeScene = function() {
    var composePlaneGeometry, composePlaneMesh;
    composePlaneGeometry = new THREE.PlaneBufferGeometry(this.width, this.height);
    composePlaneMesh = new THREE.Mesh(composePlaneGeometry, this.composeMaterial);
    return this.composeScene.add(composePlaneMesh);
  };

  SceneManager.prototype.initTextures = function() {
    var pars;
    pars = {
      minFilter: THREE.LinearFilter,
      magFilter: THREE.LinearFilter,
      format: THREE.RGBFormat,
      stencilBuffer: false
    };
    this.depthTexture = new THREE.WebGLRenderTarget(this.width, this.height, pars);
    this.normalTexture = new THREE.WebGLRenderTarget(this.width, this.height, pars);
    this.composeMaterial.uniforms.depthtexture.value = this.depthTexture;
    return this.composeMaterial.uniforms.normaltexture.value = this.normalTexture;
  };

  SceneManager.prototype.initRenderer = function() {
    this.renderer.setSize(this.width, this.height);
    return this.element.appendChild(this.renderer.domElement);
  };

  SceneManager.prototype.renderDepth = function() {
    this.objectScene.overrideMaterial = this.depthMaterial;
    this.renderer.clearTarget(this.depthTexture, true, true);
    return this.renderer.render(this.objectScene, this.objectCamera, this.depthTexture);
  };

  SceneManager.prototype.renderNormal = function() {
    this.objectScene.overrideMaterial = this.normalMaterial;
    this.renderer.clearTarget(this.normalTexture, true, true);
    return this.renderer.render(this.objectScene, this.objectCamera, this.normalTexture);
  };

  SceneManager.prototype.compose = function() {
    return this.renderer.render(this.composeScene, this.composeCamera);
  };

  SceneManager.prototype.render = function() {
    this.renderDepth();
    this.renderNormal();
    return this.compose();
  };

  return SceneManager;

})();

module.exports = SceneManager;



},{"./compose_material":"/Users/Chase_Zhang/codes/pages/sketch-rendering/coffee/compose_material.coffee"}]},{},["/Users/Chase_Zhang/codes/pages/sketch-rendering/coffee/main.coffee"])
//# sourceMappingURL=data:application/json;base64,
